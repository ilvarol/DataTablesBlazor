@typeparam Type
@inject HttpClient Http

<CascadingValue Value=@this>
    <div id="example_wrapper" class="dataTables_wrapper no-footer">
        <div class="dataTables_length" id="example_length">
            <label>
                Show
                <select name="example_length" aria-controls="example" @onchange="LengthChanged">
                    <option value="10">10</option>
                    <option value="25">25</option>
                    <option value="50">50</option>
                    <option value="100">100</option>
                </select> entries
            </label>
        </div>
        <div id="example_filter" class="dataTables_filter">
            <label>
                Search:<input type="search" class="" placeholder="" aria-controls="example" @bind="DataTablesRequest.Search" @bind:event="oninput" @onkeydown="Enter">
            </label>
        </div>
        @if (DataTablesResponse.Data == null)
        {
            <Processing></Processing>
        }
        <table id="example" class="table table-striped table-bordered dataTable no-footer" style="width: 100%;" role="grid" aria-describedby="example_info">
            <thead>
                <tr role="row">
                    @if (ColumnList != null)
                    {
                        <ColumnList Type="Type" @bind-List="ColumnList" @bind-DataTablesRequest="DataTablesRequest"></ColumnList>
                    }
                </tr>
            </thead>
            <tbody>
                @if (DataTablesResponse.Data != null)
                {
                    @foreach (var item in DataTablesResponse.Data)
                    {
                        @Body(item);
                    }
                }
            </tbody>
        </table>
        <PaginateButtonList Type="Type" @bind-DataTablesRequest="DataTablesRequest" @bind-DataTablesResponse="DataTablesResponse" ></PaginateButtonList>
    </div>
</CascadingValue>

@code {

    public DataTablesRequest DataTablesRequest { get; set; }
    public DataTablesResponse<Type> DataTablesResponse { get; set; }

    protected override async Task OnInitializedAsync()
    {
        DataTablesRequest = new DataTablesRequest() { Length = 10, SearchColumn = SearchColumn };
        DataTablesResponse = new DataTablesResponse<Type>() { RecordsTotal = 0 };

        foreach (var item in ColumnList)
        {
            item.SetOrderDirectionClass();
        }

        await Getitems();
    }

    [Parameter]
    public IList<Column> ColumnList { get; set; }

    [Parameter]
    public RenderFragment<Type> Body { get; set; }

    [Parameter]
    public string RequestUri { get; set; }

    [Parameter]
    public string SearchColumn { get; set; }


    private void LengthChanged(ChangeEventArgs e)
    {
        ResetDataTablesRequest();

        DataTablesRequest.Length = int.Parse(e.Value.ToString());

        RefreshData();
    }

    public void Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            ResetDataTablesRequest();

            RefreshData();
        }
    }

    public void ResetDataTablesRequest()
    {
        DataTablesRequest.Start = 0;

        DataTablesRequest.CurrentNumber = 1;
    }


    protected async Task Getitems()
    {
        var res = await Http.PostAsync(RequestUri,
            new StringContent(JsonSerializer.Serialize(DataTablesRequest),
            Encoding.UTF8, "application/json"));

        DataTablesResponse = JsonSerializer.Deserialize<DataTablesResponse<Type>>(await res.Content.ReadAsStringAsync());
    }

    public async Task RefreshData()
    {
        await Getitems();

        Refresh();
    }

    public void Refresh()
    {
        StateHasChanged();
    }
}
